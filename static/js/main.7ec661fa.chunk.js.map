{"version":3,"sources":["components/Header.js","components/FontNav.js","components/Footer.js","components/FontCard.js","services/fonts.js","App.js","index.js"],"names":["Header","className","href","id","type","htmlFor","icon","FontNav","textChange","fontSizeChange","fontSearchChange","resetBtnClick","toggleCardsLayout","layoutToShow","layoutToHide","cardsContainer","document","querySelector","classList","contains","remove","add","style","display","placeholder","onChange","value","onClick","e","body","handleModeToggleClick","target","handleLayoutIconClick","Footer","FontCard","font","text","textStyle","fontSize","fontFamily","baseUrl","process","loadInitialFonts","fonts","fontsNames","i","length","fontName","split","join","createLinkElm","link","createElement","setAttribute","head","appendChild","a","async","axios","get","response","fontFamilies","data","items","map","obj","family","library","faFillDrip","faBorderAll","faList","faRedo","faPlusCircle","faArrowCircleUp","faBars","window","addEventListener","arrowUp","pageYOffset","scrollTo","App","props","useState","fontCards","setFontCards","filteredFonts","setFiltredFonts","showAll","setShowAll","fontTextInput","setFontTextInput","setFontSize","useEffect","fontService","then","initialFonts","fontsToShow","event","input","toLowerCase","filter","name","includes","index","key","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.7ec661fa.chunk.js","sourcesContent":["import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nconst Header = () => {\n  return (\n    <header>\n      <div className=\"brand\">\n        <a href=\"index.html\">Favourite Google Fonts</a>\n      </div>\n      {/* Input to toggle menu for small devices */}\n      <input id=\"toggle\" type=\"checkbox\" />\n        <label className=\"toggle-container\" htmlFor=\"toggle\">\n          <FontAwesomeIcon icon=\"bars\" />\n        </label>\n      \n      <nav className=\"nav\">\n        <ul>\n          <li><a href=\"index.html\">CATALOG</a></li>\n          <li><a href=\"index.html\">FEATURED</a></li>\n          <li><a href=\"index.html\">ARTICLES</a></li>\n          <li><a href=\"index.html\">ABOUT</a></li>\n        </ul>\n      </nav>\n      \n    </header>\n  )\n}\n\nexport default Header\n","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nconst FontNav = ( {textChange, fontSizeChange, fontSearchChange, resetBtnClick} ) => {\n\n  const handleModeToggleClick = (e) => {\n    const body = document.querySelector('body')\n    // TODO Refactor to use state ?? \n    if (body.classList.contains('light-mode')){\n      body.classList.remove('light-mode')\n      body.classList.add('dark-mode')\n    } else {\n      body.classList.remove('dark-mode')\n      body.classList.add('light-mode')\n    }\n\n  }\n\n  const handleLayoutIconClick = (e) => {\n    if (e.target.classList.contains('fa-border-all') ){\n     // Show cards as grid\n       toggleCardsLayout('grid-view')\n       \n   } else if (e.target.classList.contains('fa-list') ){\n     // Show cards as list\n     toggleCardsLayout('list-view')\n   }\n }\n\n const toggleCardsLayout = layoutToShow => {\n   const layoutToHide = layoutToShow === 'grid-view' ? 'list-view' : 'grid-view'\n   const cardsContainer = document.querySelector('.cards-container')\n\n   if (cardsContainer.classList.contains(layoutToHide)){\n     cardsContainer.classList.remove(layoutToHide)\n   }\n   cardsContainer.classList.add(layoutToShow)\n\n   document.querySelector(`.${layoutToShow}-icon`).style.display = 'none'\n   document.querySelector(`.${layoutToHide}-icon`).style.display = 'block'\n\n }\n\n  return(\n    <div className=\"nav-container\">\n     \n      <input className=\"nav-container__input nav-container--search\"\n        placeholder=\"Search fonts\"\n        onChange={fontSearchChange}\n      />\n\n      <input className=\"nav-container__input nav-container--type\"\n        placeholder=\"Type something\"\n        onChange={textChange}\n      />\n\n      <select className=\"nav-container__select\"\n        onChange={fontSizeChange}>\n        <option value=\"20px\">20px</option>\n        <option value=\"24px\">24px</option>\n        <option value=\"32px\">32px</option>\n        <option value=\"40px\">40px</option>\n      </select>\n      \n      <div className=\"nav-container__toggle\">\n        <div className=\"nav-container__toggle-mode\">\n          <div className=\"nav-container-icon\">\n            <FontAwesomeIcon icon=\"fill-drip\" onClick={() => handleModeToggleClick()}/>\n            <span className=\"tooltip nav-container-icon__info\">Change background colour</span>\n          </div>\n          \n        </div>\n\n        <div className=\"nav-container__toggle-layout\" onClick={(e) => handleLayoutIconClick(e)}>\n            <div className=\"list-view-icon nav-container-icon\">\n              <FontAwesomeIcon icon=\"list\" />\n              <span className=\"tooltip nav-container-icon__info\">View as a list</span>\n            </div>\n            <div className=\"grid-view-icon nav-container-icon\">\n              <FontAwesomeIcon icon=\"border-all\" />\n              <span className=\"tooltip nav-container-icon__info\">View as a grid</span>\n            </div>\n        </div>    \n      </div>\n      \n    \n      <div className=\"nav-container__reset\" onClick={resetBtnClick}>\n        <div className=\"nav-container-icon\">\n          <FontAwesomeIcon icon=\"redo\" />\n          <span className=\"tooltip nav-container-icon__info\">Reset</span>\n        </div>\n      </div>\n    </div>\n  )\n}\nexport default FontNav","import React from 'react'\n\nconst Footer = () => {\n  return(\n    <footer>\n      <div className=\"credits\">coded by ATarsa | December 2019 | Chingu Pre-Work Project</div>\n    </footer>\n  )\n}\n\nexport default Footer","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\n\nconst FontCard = ( {font, text, fontSize} ) => {\n  // if user text input empty then use default\n  text = text ? text : 'Here comes the sun'\n  \n  // add font styles\n  const textStyle = {\n    fontSize: fontSize,\n    fontFamily: font\n  }\n\n  return(\n    <div className=\"fontCard\">\n      <div className=\"fontCard__header\">\n        <div className=\"font--name\">{font}</div>\n        <FontAwesomeIcon icon=\"plus-circle\" />\n      </div>\n      <div className=\"fontCard__main\">\n        <div className=\"fontCard--text\" style={textStyle}>\n          {text}\n        </div>\n      </div>\n    </div>\n  )\n}\n\n\nexport default FontCard","import axios from 'axios'\n\nconst API_KEY = process.env.REACT_APP_API_KEY \nconst baseUrl = `https://www.googleapis.com/webfonts/v1/webfonts?sort=popularity&key=${API_KEY}`\n\n\nconst getAll = async () => {\n  const response=  await axios.get(baseUrl, {})\n  \n  const fontFamilies = response.data.items.map(obj => obj.family)\n  loadInitialFonts(fontFamilies)\n  return fontFamilies\n  \n}\n\n// !Load all fonts \n// !not the best approach, needs optimisation\nconst loadInitialFonts = (fonts) => {\n  let fontsNames = ''\n  for (let i =0; i < fonts.length; i++){\n    \n    let fontName = fonts[i].split(' ').join('+') \n    fontsNames += `${fontName}|` \n  }\n  // create link element and add it to index.html head  \n  createLinkElm(fontsNames)\n}\n\n\nconst createLinkElm = (fontsNames) => {\n  const baseUrl = \"https://fonts.googleapis.com/css?family=\"\n  \n  const link = document.createElement('link')\n  link.setAttribute('rel', 'stylesheet')\n  link.type = 'text/css'\n  link.href = baseUrl + fontsNames\n  document.head.appendChild(link)\n}\n\n\nexport default {\n  getAll\n}\n","import React, { useState, useEffect } from 'react';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faFillDrip, faBorderAll, faList, faRedo, faPlusCircle, faArrowCircleUp, faBars } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nimport './styles/styles.scss';\nimport Header from './components/Header'\nimport FontNav from './components/FontNav'\n// import FontCards from './components/FontCards'\nimport Footer from './components/Footer'\nimport FontCard from './components/FontCard'\n\nimport fontService from './services/fonts'\n\n// add font awsome icons to the 'library' as per docs\nlibrary.add(faFillDrip, faBorderAll, faList, faRedo, faPlusCircle, faArrowCircleUp, faBars )\n\nconst App = (props) => {\n  const [fontCards, setFontCards] = useState([])\n  const [filteredFonts, setFiltredFonts] = useState([])\n  const [showAll, setShowAll] = useState(true)\n  const [fontTextInput, setFontTextInput] = useState('')\n  const [fontSize, setFontSize] = useState('20px')\n \n  useEffect(() => {\n    fontService\n      .getAll()\n      .then(initialFonts => {\n        setFontCards(initialFonts)})\n  }, []) \n\n  const fontsToShow = showAll\n   ? fontCards\n   : filteredFonts\n         \n   const cardsToShow = (fonts) => {\n    \n    return(\n    \n    fonts.map((font, index) => \n      <FontCard font={font} \n                text={fontTextInput}\n                fontSize={fontSize}\n                key={font}\n                 />\n    )\n  )}\n    \n  const handleTextInputChange = (event) => {\n    setFontTextInput(event.target.value)\n  }\n  \n  const handleFontSizeChange = (event) => {\n     setFontSize(event.target.value)   \n  }\n\n  const handleFontSearchInputChange = (event) => {\n    const input = event.target.value.toLowerCase()\n\n    if (input){\n      setFiltredFonts(fontCards.filter(name =>{ \n        name = name.toLowerCase()\n        return name.includes(input)\n        })\n      )\n      setShowAll(false)\n     \n    } else {\n      setShowAll(true)\n    }\n  }\n  \n  const handleResetBtnClick = (e) => {\n    setShowAll(true)\n    setFontSize('20px')\n    setFontTextInput('')\n    // reset FontNav\n    document.querySelector('.nav-container--search').value = ''\n    document.querySelector('.nav-container--type').value = ''\n    document.querySelector('.nav-container__select').value = '20px'\n  }\n\n \n  return(\n   <div className=\"container\">\n    <Header />\n    <main>\n      \n      <FontNav textChange={handleTextInputChange}\n              fontSizeChange={handleFontSizeChange}\n              fontSearchChange={handleFontSearchInputChange}\n              resetBtnClick={handleResetBtnClick}\n      />\n\n      <div className=\"cards-container grid-view\">\n        {/* cards */}\n        {cardsToShow(fontsToShow)}\n        {/* back to top button */}\n        <div className=\"back-to-top-btn\" >\n          <FontAwesomeIcon icon=\"arrow-circle-up\" className=\"back-to-top-btn__icon\" />\n          <span className=\"tooltip back-to-top-btn__info\">Return to top</span>\n        </div>\n      </div>\n    </main>\n      <Footer />\n   </div>\n )\n}\n\n // window event listeners\n window.addEventListener('scroll', () => {\n  // get arrow up icon container\n  const arrowUp = document.querySelector('.back-to-top-btn')\n  if (window.pageYOffset > 100){\n    arrowUp.style.display = 'flex'\n    \n    // add click event to the btn if visible\n    arrowUp.addEventListener('click', () => {\n       window.scrollTo(window.pageYOffset, 0)\n    })\n\n\n  } else {\n    arrowUp.style.display = 'none'\n  }\n  \n})\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nconst fontCards = []\n\nReactDOM.render(<App fontCards={fontCards}/>, document.getElementById('root'));\n\n"],"sourceRoot":""}