{"version":3,"sources":["components/Header.js","components/FontNav.js","components/Footer.js","components/LoadingCard.js","components/FontCard.js","components/About.js","components/Notification.js","services/fonts.js","App.js","index.js"],"names":["Header","className","to","id","type","htmlFor","icon","FontNav","textChange","fontSizeChange","fontSearchChange","resetBtnClick","toggleCardsLayout","layoutToShow","layoutToHide","cardsContainer","document","querySelector","classList","contains","remove","add","style","display","placeholder","onChange","value","onClick","e","body","handleModeToggleClick","target","handleLayoutIconClick","Footer","LoadingCard","FontCard","font","text","fontSize","handlePlusIconClick","handleDeleteIconClick","textStyle","fontFamily","About","href","Notification","notification","baseUrl","process","createFontFaceObjs","fonts","forEach","fontObj","fontUrl","files","regular","Object","keys","replace","newStyle","createElement","appendChild","createTextNode","family","head","a","async","axios","get","response","console","log","data","items","fontFamilies","map","obj","favFonts","localStorage","getItem","push","setItem","JSON","stringify","parse","favFont","index","splice","library","faFillDrip","faBorderAll","faList","faRedo","faPlusCircle","faArrowCircleUp","faBars","faTrashAlt","window","addEventListener","arrowUp","pageYOffset","scrollTo","App","props","location","useLocation","useState","fontCards","setFontCards","filteredFonts","setFiltredFonts","favouritedFonts","setFavouritedFonts","showAll","setShowAll","fontTextInput","setFontTextInput","setFontSize","setNotification","useEffect","fontService","then","initialFonts","fontsToShow","pathname","cardsToShow","key","includes","showNotification","concat","array","msg","setTimeout","event","input","toLowerCase","fontsToFilter","filter","name","exact","path","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.b2498f03.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nconst Header = () => {\n  return (\n    <header>\n      <div className=\"brand\">\n        <Link to=\"/\">Favourite Google Fonts</Link>\n      </div>\n      {/* Input to toggle menu for small devices */}\n      <input id=\"toggle\" type=\"checkbox\" />\n        <label className=\"toggle-container\" htmlFor=\"toggle\">\n          <FontAwesomeIcon icon=\"bars\" />\n        </label>\n      \n      <nav className=\"nav\">\n        <ul>\n          <li><Link to=\"/\"> CATALOG </Link></li>\n          <li><Link to=\"/favourites\"> FAVOURITES </Link></li>\n          \n          <li><Link to=\"/about\"> ABOUT </Link></li>\n        </ul>\n      </nav>\n      \n    </header>\n  )\n}\n\nexport default Header\n","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nconst FontNav = ( {textChange, fontSizeChange, fontSearchChange, resetBtnClick} ) => {\n\n  const handleModeToggleClick = (e) => {\n    const body = document.querySelector('body')\n    \n    if (body.classList.contains('light-mode')){\n      body.classList.remove('light-mode')\n      body.classList.add('dark-mode')\n    } else {\n      body.classList.remove('dark-mode')\n      body.classList.add('light-mode')\n    }\n\n  }\n\n  const handleLayoutIconClick = (e) => {\n    if (e.target.classList.contains('fa-border-all') ){\n     // Show cards as grid\n       toggleCardsLayout('grid-view')\n       \n   } else if (e.target.classList.contains('fa-list') ){\n     // Show cards as list\n     toggleCardsLayout('list-view')\n   }\n }\n\n const toggleCardsLayout = layoutToShow => {\n   const layoutToHide = layoutToShow === 'grid-view' ? 'list-view' : 'grid-view'\n   const cardsContainer = document.querySelector('.cards-container')\n\n   if (cardsContainer.classList.contains(layoutToHide)){\n     cardsContainer.classList.remove(layoutToHide)\n   }\n   cardsContainer.classList.add(layoutToShow)\n\n   document.querySelector(`.${layoutToShow}-icon`).style.display = 'none'\n   document.querySelector(`.${layoutToHide}-icon`).style.display = 'block'\n\n }\n\n  return(\n    <div className=\"nav-container\">\n     \n      <input className=\"nav-container__input nav-container--search\"\n        placeholder=\"Search fonts\"\n        onChange={fontSearchChange}\n      />\n\n      <input className=\"nav-container__input nav-container--type\"\n        placeholder=\"Type something\"\n        onChange={textChange}\n      />\n\n      <select className=\"nav-container__select\"\n        onChange={fontSizeChange}>\n        <option value=\"20px\">20px</option>\n        <option value=\"24px\">24px</option>\n        <option value=\"32px\">32px</option>\n        <option value=\"40px\">40px</option>\n      </select>\n      \n      <div className=\"nav-container__toggle\">\n        <div className=\"nav-container__toggle-mode\">\n          <div className=\"nav-container-icon\">\n            <FontAwesomeIcon icon=\"fill-drip\" onClick={() => handleModeToggleClick()}/>\n            <span className=\"tooltip nav-container-icon__info\">Change background colour</span>\n          </div>\n          \n        </div>\n\n        <div className=\"nav-container__toggle-layout\" onClick={(e) => handleLayoutIconClick(e)}>\n            <div className=\"list-view-icon nav-container-icon\">\n              <FontAwesomeIcon icon=\"list\" />\n              <span className=\"tooltip nav-container-icon__info\">View as a list</span>\n            </div>\n            <div className=\"grid-view-icon nav-container-icon\">\n              <FontAwesomeIcon icon=\"border-all\" />\n              <span className=\"tooltip nav-container-icon__info\">View as a grid</span>\n            </div>\n        </div>    \n      </div>\n      \n    \n      <div className=\"nav-container__reset\" onClick={resetBtnClick}>\n        <div className=\"nav-container-icon\">\n          <FontAwesomeIcon icon=\"redo\" />\n          <span className=\"tooltip nav-container-icon__info\">Reset</span>\n        </div>\n      </div>\n    </div>\n  )\n}\nexport default FontNav","import React from 'react'\n\nconst Footer = () => {\n  return(\n    <footer>\n      <div className=\"credits\">coded by ATarsa | December 2019 | Chingu Pre-Work Project</div>\n    </footer>\n  )\n}\n\nexport default Footer","import React from 'react'\n\nconst LoadingCard = ( ) => {\n    \n  return(\n    <div className=\"fontCard loading\">\n      \n        <div className=\"fontCard--text\" >\n          Loading...\n        </div>\n    </div>\n  )\n}\n\nexport default LoadingCard","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\n\nconst FontCard = ( {font, text, fontSize, handlePlusIconClick,handleDeleteIconClick} ) => {\n  // if user text input empty then use default\n  text = text ? text : 'Here comes the sun'\n  \n  // add font styles\n  const textStyle = {\n    fontSize: fontSize,\n    fontFamily: `\"${font}\"`\n  }\n\n    \n  return(\n    <div className=\"fontCard\">\n      <div className=\"fontCard__header\">\n        <div className=\"font--name\">{font}</div>\n        <div className=\"fontCard-icon add-font\">\n          <FontAwesomeIcon icon=\"plus-circle\" onClick={() => handlePlusIconClick(font)} />\n          <span className=\"tooltip fontCard-icon__info\">Add font to favourites</span>\n        </div>\n        <div className=\"fontCard-icon delete-font\">\n          <FontAwesomeIcon icon=\"trash-alt\" onClick={() => handleDeleteIconClick(font)} />\n          <span className=\"tooltip fontCard-icon__info\">Remove font from favourites</span>\n        </div>\n        \n      </div>\n      <div className=\"fontCard__main\">\n        <div className=\"fontCard--text\" style={textStyle}>\n          {text}\n        </div>\n      </div>\n    </div>\n  )\n}\n\n\nexport default FontCard","import React from 'react'\nimport { Link } from 'react-router-dom'\nconst About = () => (\n  <div className=\"about\">\n    <p>\n      This website is a clone of <a href=\"https://fonts.google.com/\">Google Fonts</a>.\n    </p>\n    <p>\n    A Front-End is written in React that fetches fonts data from  \n      <a href=\"https://developers.google.com/fonts/docs/getting_started\" > Google API </a>.\n    <br />\n    All available fonts can be found on  \n    <Link to=\"/\"> main/catalog</Link> page.\n    <br />\n    Cards are displayed by font popularity.\n    The User can then search for the specific font, change the font size and text displayed on all font cards. The user can also add fonts to favourites - the fonts can be then found on <Link to=\"favourites\">favourites</Link> page.\n    </p>\n    <p>The main purpose of this project was to practise React. \n      <br />\n    The source code can be found on <a href=\"https://github.com/atarsa/google-fonts-clone\">GitHub</a>.\n\n\n    </p>\n\n    \n  </div>\n)\nexport default About","import React from 'react'\n\nconst Notification = ( {notification}) => {\n  if (notification === ''){\n    return null\n  } else {\n    return(\n      <div className=\"notification\">\n        <p>{notification}</p>\n      </div>\n    )\n  }\n}\n\nexport default Notification","import axios from 'axios'\n\n\nconst API_KEY = process.env.REACT_APP_API_KEY \nconst baseUrl = `https://www.googleapis.com/webfonts/v1/webfonts?sort=popularity&key=${API_KEY}`\n\n\nconst getAll = async () => {\n  const response=  await axios.get(baseUrl, {})\n  \n  console.log('All fonts ', response.data);\n  // create FontFace for each font from API\n  createFontFaceObjs(response.data.items)\n  \n  // get all font families names\n  const fontFamilies = response.data.items.map(obj => obj.family)\n  return fontFamilies  \n}\n\n// fonts is as an array of font objects \nconst createFontFaceObjs = (fonts) => {\n  fonts.forEach(fontObj => {\n    \n    // get font url\n    // not all fonts have regular style\n    // so in that case get url of the first font style available\n    let fontUrl = fontObj.files.regular ? fontObj.files.regular : fontObj.files[Object.keys(fontObj.files)[0]]\n    \n    // font url starts with 'http' which leads to \"Blocked loading mixed active content\" error\n    // replace 'http' with 'https'\n    fontUrl = fontUrl.replace('http', 'https')\n    \n    // create new style element with fontface declaration\n    let newStyle = document.createElement('style');\n    newStyle.appendChild(document.createTextNode(`\n      @font-face {\n          font-family: \"${fontObj.family}\";\n          src: local(\"${fontObj.family}\"),\n          url(${fontUrl}) ;\n        }\n       `\n      ));\n\n    document.head.appendChild(newStyle);\n  }\n)}\n\nconst addFontToStorage = (font) => {\n  let favFonts;\n  // check if empty\n  if (localStorage.getItem('favFonts') === null){\n    favFonts = []\n    favFonts.push(font);\n\n    // set ls to favFonts\n    localStorage.setItem('favFonts', JSON.stringify(favFonts))\n  } else {\n    // get fonts from ls\n    favFonts = JSON.parse(localStorage.getItem('favFonts'))\n    favFonts.push(font)\n\n    localStorage.setItem('favFonts', JSON.stringify(favFonts))\n  }\n}\n\nconst getFontsFromStorage = () => {\n  let favFonts\n\n  if (localStorage.getItem('favFonts') === null){\n    favFonts = [];\n  } else {   \n    favFonts = JSON.parse(localStorage.getItem('favFonts'))\n  }\n  return favFonts\n}\n\nconst removeFontFromStorage = (font) => {\n  let favFonts = JSON.parse(localStorage.getItem('favFonts'))\n\n  favFonts.forEach((favFont, index) => {\n    if (favFont === font){\n      favFonts.splice(index, 1)\n    }\n  })\n\n  localStorage.setItem('favFonts', JSON.stringify(favFonts))\n}\n\nexport default {\n  getAll,\n  addFontToStorage,\n  getFontsFromStorage,\n  removeFontFromStorage\n}\n","import React, { useState, useEffect } from 'react';\nimport { \n  Route,\n  Switch,\n  useLocation\n} from 'react-router-dom'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faFillDrip, faBorderAll, faList, faRedo, faPlusCircle, faArrowCircleUp, faBars, faTrashAlt } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport LazyLoad from 'react-lazyload'\n\nimport './styles/styles.scss';\nimport Header from './components/Header'\nimport FontNav from './components/FontNav'\nimport Footer from './components/Footer'\nimport LoadingCard from './components/LoadingCard'\nimport FontCard from './components/FontCard'\nimport About from './components/About'\nimport Notification from './components/Notification'\n\nimport fontService from './services/fonts'\n\n// add font awsome icons to the 'library' as per docs\nlibrary.add(faFillDrip, faBorderAll, faList, faRedo, faPlusCircle, faArrowCircleUp, faBars, faTrashAlt )\n\nconst App = (props) => {\n  let location = useLocation()\n  const [fontCards, setFontCards] = useState([])\n  const [filteredFonts, setFiltredFonts] = useState([])\n  const [favouritedFonts, setFavouritedFonts] = useState([])\n  const [showAll, setShowAll] = useState(true)\n  const [fontTextInput, setFontTextInput] = useState('')\n  const [fontSize, setFontSize] = useState('20px')\n  const [notification, setNotification] = useState('')\n \n  useEffect(() => {\n    fontService\n      .getAll()\n      .then(initialFonts => {\n        setFontCards(initialFonts)})\n  }, []) \n\n  // get favourites fonts from local storage\n  useEffect(() => {\n    setFavouritedFonts( fontService.getFontsFromStorage() )\n  }, [])\n    \n  // set fonts to show depending on pathname\n  let fontsToShow = []\n  if (location.pathname === '/'){\n   fontsToShow = showAll\n      ? fontCards\n      : filteredFonts\n  } else if (location.pathname === '/favourites'){\n    fontsToShow = showAll\n      ? favouritedFonts\n      : filteredFonts\n  }\n  \n   \n  const cardsToShow = (fonts) => {\n    \n    return(\n    \n    fonts.map((font) => \n      <LazyLoad key={font} placeholder={<LoadingCard font={font} />}>\n\n        <FontCard font={font} \n                  text={fontTextInput}\n                  fontSize={fontSize}\n                  key={font}\n                  handlePlusIconClick={handlePlusIconClick}\n                  handleDeleteIconClick={handleDeleteIconClick}\n                  \n         />\n      </LazyLoad>\n      \n    )\n  )}\n  \n  // Add font to favourites\n  const handlePlusIconClick = ( font ) =>{\n    // TODO: check if font already in favourites\n    if (favouritedFonts.includes(font)){\n          \n      showNotification(`${font} font already in favourites!`)\n    } else {\n      \n      setFavouritedFonts(favouritedFonts => favouritedFonts.concat(font))\n      fontService.addFontToStorage(font)\n      showNotification(`${font} font added to favourites!`)\n    }   \n  }\n\n  const handleDeleteIconClick = (font) => {\n    let array = [...favouritedFonts]\n    \n    array.forEach((favFont, index) => {\n      if (favFont === font){\n        array.splice(index, 1)\n      }\n    })\n    \n    setFavouritedFonts(array)\n    \n    fontService.removeFontFromStorage(font)\n    showNotification(`${font} font deleted from favourites!`)\n  }\n  const handleTextInputChange = (event) => {\n    setFontTextInput(event.target.value)\n  }\n  \n  const handleFontSizeChange = (event) => {\n     setFontSize(event.target.value)   \n  }\n\n  const handleFontSearchInputChange = (event) => {\n    const input = event.target.value.toLowerCase()\n    \n    // sets fonts to filter depending on pathname\n    let fontsToFilter = []\n    if (location.pathname === '/'){\n      fontsToFilter = fontCards\n     } else if (location.pathname === '/favourites'){\n       fontsToFilter = favouritedFonts\n     }\n\n    if (input){\n      setFiltredFonts(fontsToFilter.filter(name =>{ \n        name = name.toLowerCase()\n        return name.includes(input)\n        })\n      )\n      setShowAll(false)\n     \n    } else {\n      setShowAll(true)\n    }\n  }\n  \n  const handleResetBtnClick = (e) => {\n    setShowAll(true)\n    setFontSize('20px')\n    setFontTextInput('')\n    // reset FontNav\n    document.querySelector('.nav-container--search').value = ''\n    document.querySelector('.nav-container--type').value = ''\n    document.querySelector('.nav-container__select').value = '20px'\n  }\n\n  const showNotification = (msg) => {\n    setNotification(msg)\n    setTimeout(()=> {\n        setNotification('')\n      }, 5000) \n  }\n\n  return(\n   <div className=\"container\">\n     \n      <Header />\n      <main>\n        \n        <FontNav textChange={handleTextInputChange}\n                fontSizeChange={handleFontSizeChange}\n                fontSearchChange={handleFontSearchInputChange}\n                resetBtnClick={handleResetBtnClick}\n        />\n        <Notification notification={notification} />\n        <Switch>\n          <Route exact path=\"/\">\n              <div className=\"cards-container grid-view catalog-view\">\n                {cardsToShow(fontsToShow, 'catalog')}\n              </div>\n            </Route >\n          <Route path=\"/favourites\" >\n              <div className=\"cards-container grid-view favourites-view\">\n                {cardsToShow(fontsToShow, 'favourites')}\n              </div>\n          </Route>\n        \n          <Route path=\"/about\" >\n            <About />\n          </Route> \n\n        </Switch>\n\n        {/* back to top button */}\n        <div className=\"back-to-top-btn\" >\n            <FontAwesomeIcon icon=\"arrow-circle-up\" className=\"back-to-top-btn__icon\" />\n            <span className=\"tooltip back-to-top-btn__info\">Return to top</span>\n        </div>\n      </main>\n    \n    \n    <Footer />\n   </div>\n )\n}\n\n // window event listeners\n window.addEventListener('scroll', () => {\n  // get arrow up icon container\n  const arrowUp = document.querySelector('.back-to-top-btn')\n  if (window.pageYOffset > 100){\n    arrowUp.style.display = 'flex'\n    \n    // add click event to the btn if visible\n    arrowUp.addEventListener('click', () => {\n       window.scrollTo(window.pageYOffset, 0)\n    })\n\n\n  } else {\n    arrowUp.style.display = 'none'\n  }\n  \n})\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport './index.scss';\nimport App from './App';\n\nconst fontCards = []\n\nReactDOM.render(\n  <Router>\n    <App fontCards={fontCards}/>\n  </Router>,\n   document.getElementById('root'));\n\n"],"sourceRoot":""}