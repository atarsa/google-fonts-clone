{"version":3,"sources":["components/Header.js","components/FontNav.js","components/Footer.js","components/LoadingCard.js","components/FontCard.js","services/fonts.js","App.js","index.js"],"names":["Header","className","href","id","type","htmlFor","icon","FontNav","textChange","fontSizeChange","fontSearchChange","resetBtnClick","toggleCardsLayout","layoutToShow","layoutToHide","cardsContainer","document","querySelector","classList","contains","remove","add","style","display","placeholder","onChange","value","onClick","e","body","handleModeToggleClick","target","handleLayoutIconClick","Footer","LoadingCard","FontCard","font","text","textStyle","fontSize","fontFamily","baseUrl","process","createFontFaceObjs","fonts","forEach","fontObj","fontUrl","files","regular","Object","keys","newStyle","createElement","appendChild","createTextNode","family","head","a","async","axios","get","response","console","log","data","items","fontFamilies","map","obj","library","faFillDrip","faBorderAll","faList","faRedo","faPlusCircle","faArrowCircleUp","faBars","window","addEventListener","arrowUp","pageYOffset","scrollTo","App","props","useState","fontCards","setFontCards","filteredFonts","setFiltredFonts","showAll","setShowAll","fontTextInput","setFontTextInput","setFontSize","useEffect","fontService","then","initialFonts","fontsToShow","event","input","toLowerCase","filter","name","includes","key","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.bcfcbf0d.chunk.js","sourcesContent":["import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nconst Header = () => {\n  return (\n    <header>\n      <div className=\"brand\">\n        <a href=\"index.html\">Favourite Google Fonts</a>\n      </div>\n      {/* Input to toggle menu for small devices */}\n      <input id=\"toggle\" type=\"checkbox\" />\n        <label className=\"toggle-container\" htmlFor=\"toggle\">\n          <FontAwesomeIcon icon=\"bars\" />\n        </label>\n      \n      <nav className=\"nav\">\n        <ul>\n          <li><a href=\"index.html\">CATALOG</a></li>\n          <li><a href=\"index.html\">FEATURED</a></li>\n          <li><a href=\"index.html\">ARTICLES</a></li>\n          <li><a href=\"index.html\">ABOUT</a></li>\n        </ul>\n      </nav>\n      \n    </header>\n  )\n}\n\nexport default Header\n","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nconst FontNav = ( {textChange, fontSizeChange, fontSearchChange, resetBtnClick} ) => {\n\n  const handleModeToggleClick = (e) => {\n    const body = document.querySelector('body')\n    // TODO Refactor to use state ?? \n    if (body.classList.contains('light-mode')){\n      body.classList.remove('light-mode')\n      body.classList.add('dark-mode')\n    } else {\n      body.classList.remove('dark-mode')\n      body.classList.add('light-mode')\n    }\n\n  }\n\n  const handleLayoutIconClick = (e) => {\n    if (e.target.classList.contains('fa-border-all') ){\n     // Show cards as grid\n       toggleCardsLayout('grid-view')\n       \n   } else if (e.target.classList.contains('fa-list') ){\n     // Show cards as list\n     toggleCardsLayout('list-view')\n   }\n }\n\n const toggleCardsLayout = layoutToShow => {\n   const layoutToHide = layoutToShow === 'grid-view' ? 'list-view' : 'grid-view'\n   const cardsContainer = document.querySelector('.cards-container')\n\n   if (cardsContainer.classList.contains(layoutToHide)){\n     cardsContainer.classList.remove(layoutToHide)\n   }\n   cardsContainer.classList.add(layoutToShow)\n\n   document.querySelector(`.${layoutToShow}-icon`).style.display = 'none'\n   document.querySelector(`.${layoutToHide}-icon`).style.display = 'block'\n\n }\n\n  return(\n    <div className=\"nav-container\">\n     \n      <input className=\"nav-container__input nav-container--search\"\n        placeholder=\"Search fonts\"\n        onChange={fontSearchChange}\n      />\n\n      <input className=\"nav-container__input nav-container--type\"\n        placeholder=\"Type something\"\n        onChange={textChange}\n      />\n\n      <select className=\"nav-container__select\"\n        onChange={fontSizeChange}>\n        <option value=\"20px\">20px</option>\n        <option value=\"24px\">24px</option>\n        <option value=\"32px\">32px</option>\n        <option value=\"40px\">40px</option>\n      </select>\n      \n      <div className=\"nav-container__toggle\">\n        <div className=\"nav-container__toggle-mode\">\n          <div className=\"nav-container-icon\">\n            <FontAwesomeIcon icon=\"fill-drip\" onClick={() => handleModeToggleClick()}/>\n            <span className=\"tooltip nav-container-icon__info\">Change background colour</span>\n          </div>\n          \n        </div>\n\n        <div className=\"nav-container__toggle-layout\" onClick={(e) => handleLayoutIconClick(e)}>\n            <div className=\"list-view-icon nav-container-icon\">\n              <FontAwesomeIcon icon=\"list\" />\n              <span className=\"tooltip nav-container-icon__info\">View as a list</span>\n            </div>\n            <div className=\"grid-view-icon nav-container-icon\">\n              <FontAwesomeIcon icon=\"border-all\" />\n              <span className=\"tooltip nav-container-icon__info\">View as a grid</span>\n            </div>\n        </div>    \n      </div>\n      \n    \n      <div className=\"nav-container__reset\" onClick={resetBtnClick}>\n        <div className=\"nav-container-icon\">\n          <FontAwesomeIcon icon=\"redo\" />\n          <span className=\"tooltip nav-container-icon__info\">Reset</span>\n        </div>\n      </div>\n    </div>\n  )\n}\nexport default FontNav","import React from 'react'\n\nconst Footer = () => {\n  return(\n    <footer>\n      <div className=\"credits\">coded by ATarsa | December 2019 | Chingu Pre-Work Project</div>\n    </footer>\n  )\n}\n\nexport default Footer","import React from 'react'\n\nconst LoadingCard = ( ) => {\n    \n  return(\n    <div className=\"fontCard loading\">\n      \n        <div className=\"fontCard--text\" >\n          Loading...\n        </div>\n    </div>\n  )\n}\n\nexport default LoadingCard","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\n\nconst FontCard = ( {font, text, fontSize} ) => {\n  // if user text input empty then use default\n  text = text ? text : 'Here comes the sun'\n  \n  // add font styles\n  const textStyle = {\n    fontSize: fontSize,\n    fontFamily: `\"${font}\"`\n  }\n\n  return(\n    <div className=\"fontCard\">\n      <div className=\"fontCard__header\">\n        <div className=\"font--name\">{font}</div>\n        <FontAwesomeIcon icon=\"plus-circle\" />\n      </div>\n      <div className=\"fontCard__main\">\n        <div className=\"fontCard--text\" style={textStyle}>\n          {text}\n        </div>\n      </div>\n    </div>\n  )\n}\n\n\nexport default FontCard","import axios from 'axios'\n\n\nconst API_KEY = process.env.REACT_APP_API_KEY \nconst baseUrl = `https://www.googleapis.com/webfonts/v1/webfonts?sort=popularity&key=${API_KEY}`\n\n\nconst getAll = async () => {\n  const response=  await axios.get(baseUrl, {})\n  \n  console.log('All fonts ', response.data);\n  // create FontFace for each font from API\n  createFontFaceObjs(response.data.items)\n  \n  // get all font families names\n  const fontFamilies = response.data.items.map(obj => obj.family)\n  return fontFamilies  \n}\n\n// fonts is as an array of font objects \nconst createFontFaceObjs = (fonts) => {\n  fonts.forEach(fontObj => {\n    \n    // get font url\n    // not all fonts have regular style\n    // so in that case get url of the first font style available\n    let fontUrl = fontObj.files.regular ? fontObj.files.regular : fontObj.files[Object.keys(fontObj.files)[0]]\n    \n    // create new style element with fontface declaration\n    let newStyle = document.createElement('style');\n    newStyle.appendChild(document.createTextNode(`\n      @font-face {\n          font-family: \"${fontObj.family}\";\n          src: local(\"${fontObj.family}\"),\n          url(${fontUrl}) ;\n        }\n       `\n      ));\n\n    document.head.appendChild(newStyle);\n  }\n)}\n\n\nexport default {\n  getAll\n}\n","import React, { useState, useEffect } from 'react';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faFillDrip, faBorderAll, faList, faRedo, faPlusCircle, faArrowCircleUp, faBars } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport LazyLoad from 'react-lazyload'\n\nimport './styles/styles.scss';\nimport Header from './components/Header'\nimport FontNav from './components/FontNav'\nimport Footer from './components/Footer'\nimport LoadingCard from './components/LoadingCard'\nimport FontCard from './components/FontCard'\n\nimport fontService from './services/fonts'\n\n// add font awsome icons to the 'library' as per docs\nlibrary.add(faFillDrip, faBorderAll, faList, faRedo, faPlusCircle, faArrowCircleUp, faBars )\n\nconst App = (props) => {\n  const [fontCards, setFontCards] = useState([])\n  const [filteredFonts, setFiltredFonts] = useState([])\n  const [showAll, setShowAll] = useState(true)\n  const [fontTextInput, setFontTextInput] = useState('')\n  const [fontSize, setFontSize] = useState('20px')\n \n  useEffect(() => {\n    fontService\n      .getAll()\n      .then(initialFonts => {\n        setFontCards(initialFonts)})\n  }, []) \n\n  \n\n  const fontsToShow = showAll\n   ? fontCards\n   : filteredFonts\n  \n\n \n  const cardsToShow = (fonts) => {\n    \n    return(\n    \n    fonts.map((font) => \n      <LazyLoad key={font} placeholder={<LoadingCard font={font} />}>\n\n        <FontCard font={font} \n                  text={fontTextInput}\n                  fontSize={fontSize}\n                  key={font}\n         />\n      </LazyLoad>\n      \n    )\n  )}\n    \n  const handleTextInputChange = (event) => {\n    setFontTextInput(event.target.value)\n  }\n  \n  const handleFontSizeChange = (event) => {\n     setFontSize(event.target.value)   \n  }\n\n  const handleFontSearchInputChange = (event) => {\n    const input = event.target.value.toLowerCase()\n\n    if (input){\n      setFiltredFonts(fontCards.filter(name =>{ \n        name = name.toLowerCase()\n        return name.includes(input)\n        })\n      )\n      setShowAll(false)\n     \n    } else {\n      setShowAll(true)\n    }\n  }\n  \n  const handleResetBtnClick = (e) => {\n    setShowAll(true)\n    setFontSize('20px')\n    setFontTextInput('')\n    // reset FontNav\n    document.querySelector('.nav-container--search').value = ''\n    document.querySelector('.nav-container--type').value = ''\n    document.querySelector('.nav-container__select').value = '20px'\n  }\n\n  \n  return(\n   <div className=\"container\">\n    <Header />\n    <main>\n      \n      <FontNav textChange={handleTextInputChange}\n              fontSizeChange={handleFontSizeChange}\n              fontSearchChange={handleFontSearchInputChange}\n              resetBtnClick={handleResetBtnClick}\n      />\n\n      <div className=\"cards-container grid-view\">\n        {/* cards */}\n        {cardsToShow(fontsToShow)}\n        {/* back to top button */}\n        <div className=\"back-to-top-btn\" >\n          <FontAwesomeIcon icon=\"arrow-circle-up\" className=\"back-to-top-btn__icon\" />\n          <span className=\"tooltip back-to-top-btn__info\">Return to top</span>\n        </div>\n      </div>\n    </main>\n      <Footer />\n   </div>\n )\n}\n\n // window event listeners\n window.addEventListener('scroll', () => {\n  // get arrow up icon container\n  const arrowUp = document.querySelector('.back-to-top-btn')\n  if (window.pageYOffset > 100){\n    arrowUp.style.display = 'flex'\n    \n    // add click event to the btn if visible\n    arrowUp.addEventListener('click', () => {\n       window.scrollTo(window.pageYOffset, 0)\n    })\n\n\n  } else {\n    arrowUp.style.display = 'none'\n  }\n  \n})\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nconst fontCards = []\n\nReactDOM.render(<App fontCards={fontCards}/>, document.getElementById('root'));\n\n"],"sourceRoot":""}